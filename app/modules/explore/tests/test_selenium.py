# Generated by Selenium IDE
import time
from selenium.webdriver.common.by import By
from core.environment.host import get_host_for_selenium_testing
from core.selenium.common import close_driver, initialize_driver


def test_by_author():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(4)
        # Seleccionar un autor en el dropdown
        dropdown = driver.find_element(By.ID, "authors")
        driver.execute_script("arguments[0].value = 'Author 1';", dropdown)

        time.sleep(4)
        # Simular un clic en "View dataset" usando JavaScript
        view_dataset_link = driver.find_element(By.LINK_TEXT, "View dataset")
        driver.execute_script("arguments[0].click();", view_dataset_link)
        # Simular un clic en el elemento con la clase 'doi_text'
        doi_text_element = driver.find_element(By.CSS_SELECTOR, ".doi_text")
        driver.execute_script("arguments[0].click();", doi_text_element)
        print("Test passed successfully")
    finally:
        close_driver(driver)


def test_testbypublication():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(4)

        dropdown = driver.find_element(By.ID, "publication_type")
        driver.execute_script("arguments[0].value = 'Book';", dropdown)
        time.sleep(1)
        driver.execute_script("arguments[0].value = 'Book Section';", dropdown)
        time.sleep(1)
        driver.execute_script("arguments[0].value = 'Conference Paper';", dropdown)
        time.sleep(1)
        driver.execute_script("arguments[0].value = 'Data Management Plan';", dropdown)
        time.sleep(1)
        sample_dataset_link = driver.find_element(By.LINK_TEXT, "Sample dataset 2")
        driver.execute_script("arguments[0].click();", sample_dataset_link)

        print("Test passed successfully")
    finally:
        close_driver(driver)


def test_files_n():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(4)

        dropdown = driver.find_element(By.ID, "files")
        driver.execute_script("arguments[0].value = '1 File';", dropdown)
        time.sleep(1)  # Pausa para permitir que los cambios surtan efecto
        driver.execute_script("arguments[0].value = '2 Files';", dropdown)
        time.sleep(1)

        driver.execute_script("arguments[0].value = '3 Files';", dropdown)
        time.sleep(1)

        sample_dataset_link = driver.find_element(By.LINK_TEXT, "Sample dataset 4")
        driver.execute_script("arguments[0].click();", sample_dataset_link)

        print('Test passed successfully')
    finally:
        close_driver(driver)


def test_title():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(4)

        dropdown = driver.find_element(By.ID, "title")
        driver.execute_script("arguments[0].value = 'Sample dataset 4';", dropdown)
        time.sleep(1)  # Pausa para permitir que los cambios surtan efecto

        sample_dataset_link = driver.find_element(By.LINK_TEXT, "Sample dataset 4")
        driver.execute_script("arguments[0].click();", sample_dataset_link)

        print('Test passed successfully')
    finally:
        close_driver(driver)


def test_size():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(10)

        dropdown = driver.find_element(By.ID, "size")
        driver.execute_script("arguments[0].value = 'Between 1KB and 2KB';", dropdown)
        time.sleep(1)  # Pausa para permitir que los cambios surtan efecto

        sample_dataset_link = driver.find_element(By.LINK_TEXT, "Sample dataset 4")
        driver.execute_script("arguments[0].click();", sample_dataset_link)

        print('Test passed successfully')
    finally:
        close_driver(driver)


def test_clear_filters():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}/explore')
        time.sleep(4)

        dropdown = driver.find_element(By.ID, "authors")
        driver.execute_script("arguments[0].value = 'Author 4';", dropdown)
        time.sleep(1)  # Pausa para permitir que los cambios surtan efecto

        clear_filters_button = driver.find_element(By.ID, "clear-filters")
        driver.execute_script("arguments[0].click();", clear_filters_button)
        time.sleep(4)
        sample_dataset_link = driver.find_element(By.LINK_TEXT, "Sample dataset 1")
        driver.execute_script("arguments[0].click();", sample_dataset_link)

        print('Test passed successfully')

    finally:
        close_driver(driver)


# test_by_author()
test_clear_filters()
test_files_n()
test_size()
test_testbypublication()
test_title()
