# Generated by Selenium IDE
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains

from core.environment.host import get_host_for_selenium_testing
from core.selenium.common import close_driver, initialize_driver


def test_by_author():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.CSS_SELECTOR, ".sidebar-item:nth-child(3) .align-middle:nth-child(2)").click()
        dropdown = driver.find_element(By.ID, "authors")
        dropdown.find_element(By.XPATH, "//option[. = 'Author 1']").click()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.LINK_TEXT, "View dataset").click()
        driver.find_element(By.CSS_SELECTOR, ".doi_text").click()
        print("Test passed successfully")
    finally:
        close_driver(driver)


def test_testbypublication():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.CSS_SELECTOR, ".sidebar-item:nth-child(3) .align-middle:nth-child(2)").click()
        dropdown = driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Book']").click()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        dropdown = driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Book Section']").click()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        dropdown = driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Conference Paper']").click()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        dropdown = driver.find_element(By.ID, "publication_type")
        dropdown.find_element(By.XPATH, "//option[. = 'Data Management Plan']").click()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "publication_type")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.LINK_TEXT, "Sample dataset 2").click()
        print("Test passed succesfully")
    finally:
        close_driver(driver)


def test_files_n():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.CSS_SELECTOR, ".sidebar-item:nth-child(3) .align-middle:nth-child(2)").click()
        dropdown = driver.find_element(By.ID, "files")
        dropdown.find_element(By.XPATH, "//option[. = '1 File']").click()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        dropdown = driver.find_element(By.ID, "files")
        dropdown.find_element(By.XPATH, "//option[. = '2 Files']").click()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        dropdown = driver.find_element(By.ID, "files")
        dropdown.find_element(By.XPATH, "//option[. = '3 Files']").click()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "files")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.LINK_TEXT, "Sample dataset 4").click()
        print('Test passed successfully')
    finally:
        close_driver(driver)


def test_title():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.LINK_TEXT, "Explore").click()
        dropdown = driver.find_element(By.ID, "title")
        dropdown.find_element(By.XPATH, "//option[. = 'Sample dataset 4']").click()
        element = driver.find_element(By.ID, "title")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "title")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "title")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.LINK_TEXT, "Sample dataset 4").click()
        print('Test passed successfully')
    finally:
        close_driver(driver)


def test_size():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.CSS_SELECTOR, ".sidebar-item:nth-child(3) .align-middle:nth-child(2)").click()
        dropdown = driver.find_element(By.ID, "size")
        dropdown.find_element(By.XPATH, "//option[. = 'Between 1KB and 2KB']").click()
        element = driver.find_element(By.ID, "size")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "size")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "size")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.LINK_TEXT, "Sample dataset 4").click()
        print('Test passed successfully')

    finally:
        close_driver(driver)


def test_clear_filters():
    driver = initialize_driver()

    try:
        host = get_host_for_selenium_testing()
        driver.get(f'{host}')
        driver.set_window_size(1854, 1048)
        driver.find_element(By.LINK_TEXT, "Explore").click()
        dropdown = driver.find_element(By.ID, "authors")
        dropdown.find_element(By.XPATH, "//option[. = 'Author 4']").click()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).perform()
        element = driver.find_element(By.ID, "authors")
        actions = ActionChains(driver)
        actions.move_to_element(element).release().perform()
        driver.find_element(By.ID, "clear-filters").click()
        driver.find_element(By.LINK_TEXT, "Sample dataset 1").click()
        print('Test passed successfully')

    finally:
        close_driver(driver)
