# Use an official Python runtime as a parent image, Alpine version for a lighter footprint
FROM python:3.12-slim

# Add an argument for version tag
ARG VERSION_TAG

# Add an argument for module ignore
ARG MODULE_IGNORE

# Install necessary packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends mariadb-client \
    && apt-get install -y --no-install-recommends gcc libc-dev python3-dev libffi-dev \
    && apt-get install -y --no-install-recommends curl \
    && apt-get install -y --no-install-recommends bash \
    && apt-get install -y --no-install-recommends openrc \
    && apt-get install -y --no-install-recommends build-essential

# Clean up
RUN apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set the working directory in the container to /app
WORKDIR /app

# Copy requirements.txt into the working directory /app
COPY requirements.txt .

# Update pip
RUN pip install --no-cache-dir --upgrade pip

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Create the .version file with the content of VERSION_TAG
RUN echo $VERSION_TAG > /app/.version

# Create the .moduleignore file with the content of MODULE_IGNORE
RUN echo $MODULE_IGNORE > /app/.moduleignore

# Copy the scripts directory and set execution permissions
COPY --chmod=0755 scripts/ ./scripts/

# Copy the entrypoint.sh script and set execution permissions
COPY --chmod=0755 docker/entrypoints/production_entrypoint.sh /app/entrypoint.sh

# Copy files
COPY app/ ./app
COPY core/ ./core
COPY migrations/ ./migrations

# Removes cache at the build stage
RUN find . -type d -name "__pycache__" -exec rm -r {} + && \
    find . -type f -name "*.pyc" -exec rm -f {} +

# Expose port 5000
EXPOSE 5000

# Run the application using the production entrypoint script
CMD ["/app/entrypoint.sh"]
